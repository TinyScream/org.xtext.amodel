/**
 * generated by Xtext 2.10.0
 */
package org.xtext.asomemodel.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.asomemodel.AsomemodelPackage;
import org.xtext.asomemodel.DomainInterface;
import org.xtext.asomemodel.Model;
import org.xtext.asomemodel.RepositoryService;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.asomemodel.impl.ModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.ModelImpl#getRepositoryservice <em>Repositoryservice</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.ModelImpl#getDomaininterface <em>Domaininterface</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends AsomemodelImpl implements Model
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRepositoryservice() <em>Repositoryservice</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepositoryservice()
   * @generated
   * @ordered
   */
  protected RepositoryService repositoryservice;

  /**
   * The cached value of the '{@link #getDomaininterface() <em>Domaininterface</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomaininterface()
   * @generated
   * @ordered
   */
  protected DomainInterface domaininterface;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsomemodelPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.MODEL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RepositoryService getRepositoryservice()
  {
    return repositoryservice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRepositoryservice(RepositoryService newRepositoryservice, NotificationChain msgs)
  {
    RepositoryService oldRepositoryservice = repositoryservice;
    repositoryservice = newRepositoryservice;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsomemodelPackage.MODEL__REPOSITORYSERVICE, oldRepositoryservice, newRepositoryservice);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRepositoryservice(RepositoryService newRepositoryservice)
  {
    if (newRepositoryservice != repositoryservice)
    {
      NotificationChain msgs = null;
      if (repositoryservice != null)
        msgs = ((InternalEObject)repositoryservice).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsomemodelPackage.MODEL__REPOSITORYSERVICE, null, msgs);
      if (newRepositoryservice != null)
        msgs = ((InternalEObject)newRepositoryservice).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsomemodelPackage.MODEL__REPOSITORYSERVICE, null, msgs);
      msgs = basicSetRepositoryservice(newRepositoryservice, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.MODEL__REPOSITORYSERVICE, newRepositoryservice, newRepositoryservice));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainInterface getDomaininterface()
  {
    return domaininterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDomaininterface(DomainInterface newDomaininterface, NotificationChain msgs)
  {
    DomainInterface oldDomaininterface = domaininterface;
    domaininterface = newDomaininterface;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsomemodelPackage.MODEL__DOMAININTERFACE, oldDomaininterface, newDomaininterface);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDomaininterface(DomainInterface newDomaininterface)
  {
    if (newDomaininterface != domaininterface)
    {
      NotificationChain msgs = null;
      if (domaininterface != null)
        msgs = ((InternalEObject)domaininterface).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsomemodelPackage.MODEL__DOMAININTERFACE, null, msgs);
      if (newDomaininterface != null)
        msgs = ((InternalEObject)newDomaininterface).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsomemodelPackage.MODEL__DOMAININTERFACE, null, msgs);
      msgs = basicSetDomaininterface(newDomaininterface, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.MODEL__DOMAININTERFACE, newDomaininterface, newDomaininterface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsomemodelPackage.MODEL__REPOSITORYSERVICE:
        return basicSetRepositoryservice(null, msgs);
      case AsomemodelPackage.MODEL__DOMAININTERFACE:
        return basicSetDomaininterface(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsomemodelPackage.MODEL__NAME:
        return getName();
      case AsomemodelPackage.MODEL__REPOSITORYSERVICE:
        return getRepositoryservice();
      case AsomemodelPackage.MODEL__DOMAININTERFACE:
        return getDomaininterface();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsomemodelPackage.MODEL__NAME:
        setName((String)newValue);
        return;
      case AsomemodelPackage.MODEL__REPOSITORYSERVICE:
        setRepositoryservice((RepositoryService)newValue);
        return;
      case AsomemodelPackage.MODEL__DOMAININTERFACE:
        setDomaininterface((DomainInterface)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsomemodelPackage.MODEL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AsomemodelPackage.MODEL__REPOSITORYSERVICE:
        setRepositoryservice((RepositoryService)null);
        return;
      case AsomemodelPackage.MODEL__DOMAININTERFACE:
        setDomaininterface((DomainInterface)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsomemodelPackage.MODEL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AsomemodelPackage.MODEL__REPOSITORYSERVICE:
        return repositoryservice != null;
      case AsomemodelPackage.MODEL__DOMAININTERFACE:
        return domaininterface != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
