/**
 * generated by Xtext 2.10.0
 */
package org.xtext.asomemodel.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.asomemodel.AsomemodelPackage;
import org.xtext.asomemodel.Attri;
import org.xtext.asomemodel.DomainInterface;
import org.xtext.asomemodel.Model;
import org.xtext.asomemodel.Multiplicity;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Attri</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.asomemodel.impl.AttriImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.AttriImpl#getCrossModel <em>Cross Model</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.AttriImpl#getCrossInterface <em>Cross Interface</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.AttriImpl#getDatatype <em>Datatype</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.AttriImpl#getMultiplicity <em>Multiplicity</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.AttriImpl#getOrder <em>Order</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AttriImpl extends MinimalEObjectImpl.Container implements Attri
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCrossModel() <em>Cross Model</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCrossModel()
   * @generated
   * @ordered
   */
  protected Model crossModel;

  /**
   * The cached value of the '{@link #getCrossInterface() <em>Cross Interface</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCrossInterface()
   * @generated
   * @ordered
   */
  protected DomainInterface crossInterface;

  /**
   * The default value of the '{@link #getDatatype() <em>Datatype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDatatype()
   * @generated
   * @ordered
   */
  protected static final String DATATYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDatatype() <em>Datatype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDatatype()
   * @generated
   * @ordered
   */
  protected String datatype = DATATYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getMultiplicity() <em>Multiplicity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplicity()
   * @generated
   * @ordered
   */
  protected Multiplicity multiplicity;

  /**
   * The default value of the '{@link #getOrder() <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected static final String ORDER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOrder() <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected String order = ORDER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttriImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsomemodelPackage.Literals.ATTRI;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.ATTRI__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model getCrossModel()
  {
    if (crossModel != null && crossModel.eIsProxy())
    {
      InternalEObject oldCrossModel = (InternalEObject)crossModel;
      crossModel = (Model)eResolveProxy(oldCrossModel);
      if (crossModel != oldCrossModel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AsomemodelPackage.ATTRI__CROSS_MODEL, oldCrossModel, crossModel));
      }
    }
    return crossModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model basicGetCrossModel()
  {
    return crossModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCrossModel(Model newCrossModel)
  {
    Model oldCrossModel = crossModel;
    crossModel = newCrossModel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.ATTRI__CROSS_MODEL, oldCrossModel, crossModel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainInterface getCrossInterface()
  {
    if (crossInterface != null && crossInterface.eIsProxy())
    {
      InternalEObject oldCrossInterface = (InternalEObject)crossInterface;
      crossInterface = (DomainInterface)eResolveProxy(oldCrossInterface);
      if (crossInterface != oldCrossInterface)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AsomemodelPackage.ATTRI__CROSS_INTERFACE, oldCrossInterface, crossInterface));
      }
    }
    return crossInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainInterface basicGetCrossInterface()
  {
    return crossInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCrossInterface(DomainInterface newCrossInterface)
  {
    DomainInterface oldCrossInterface = crossInterface;
    crossInterface = newCrossInterface;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.ATTRI__CROSS_INTERFACE, oldCrossInterface, crossInterface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDatatype()
  {
    return datatype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDatatype(String newDatatype)
  {
    String oldDatatype = datatype;
    datatype = newDatatype;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.ATTRI__DATATYPE, oldDatatype, datatype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Multiplicity getMultiplicity()
  {
    return multiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMultiplicity(Multiplicity newMultiplicity, NotificationChain msgs)
  {
    Multiplicity oldMultiplicity = multiplicity;
    multiplicity = newMultiplicity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsomemodelPackage.ATTRI__MULTIPLICITY, oldMultiplicity, newMultiplicity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMultiplicity(Multiplicity newMultiplicity)
  {
    if (newMultiplicity != multiplicity)
    {
      NotificationChain msgs = null;
      if (multiplicity != null)
        msgs = ((InternalEObject)multiplicity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsomemodelPackage.ATTRI__MULTIPLICITY, null, msgs);
      if (newMultiplicity != null)
        msgs = ((InternalEObject)newMultiplicity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsomemodelPackage.ATTRI__MULTIPLICITY, null, msgs);
      msgs = basicSetMultiplicity(newMultiplicity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.ATTRI__MULTIPLICITY, newMultiplicity, newMultiplicity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOrder()
  {
    return order;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOrder(String newOrder)
  {
    String oldOrder = order;
    order = newOrder;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.ATTRI__ORDER, oldOrder, order));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsomemodelPackage.ATTRI__MULTIPLICITY:
        return basicSetMultiplicity(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsomemodelPackage.ATTRI__NAME:
        return getName();
      case AsomemodelPackage.ATTRI__CROSS_MODEL:
        if (resolve) return getCrossModel();
        return basicGetCrossModel();
      case AsomemodelPackage.ATTRI__CROSS_INTERFACE:
        if (resolve) return getCrossInterface();
        return basicGetCrossInterface();
      case AsomemodelPackage.ATTRI__DATATYPE:
        return getDatatype();
      case AsomemodelPackage.ATTRI__MULTIPLICITY:
        return getMultiplicity();
      case AsomemodelPackage.ATTRI__ORDER:
        return getOrder();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsomemodelPackage.ATTRI__NAME:
        setName((String)newValue);
        return;
      case AsomemodelPackage.ATTRI__CROSS_MODEL:
        setCrossModel((Model)newValue);
        return;
      case AsomemodelPackage.ATTRI__CROSS_INTERFACE:
        setCrossInterface((DomainInterface)newValue);
        return;
      case AsomemodelPackage.ATTRI__DATATYPE:
        setDatatype((String)newValue);
        return;
      case AsomemodelPackage.ATTRI__MULTIPLICITY:
        setMultiplicity((Multiplicity)newValue);
        return;
      case AsomemodelPackage.ATTRI__ORDER:
        setOrder((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsomemodelPackage.ATTRI__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AsomemodelPackage.ATTRI__CROSS_MODEL:
        setCrossModel((Model)null);
        return;
      case AsomemodelPackage.ATTRI__CROSS_INTERFACE:
        setCrossInterface((DomainInterface)null);
        return;
      case AsomemodelPackage.ATTRI__DATATYPE:
        setDatatype(DATATYPE_EDEFAULT);
        return;
      case AsomemodelPackage.ATTRI__MULTIPLICITY:
        setMultiplicity((Multiplicity)null);
        return;
      case AsomemodelPackage.ATTRI__ORDER:
        setOrder(ORDER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsomemodelPackage.ATTRI__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AsomemodelPackage.ATTRI__CROSS_MODEL:
        return crossModel != null;
      case AsomemodelPackage.ATTRI__CROSS_INTERFACE:
        return crossInterface != null;
      case AsomemodelPackage.ATTRI__DATATYPE:
        return DATATYPE_EDEFAULT == null ? datatype != null : !DATATYPE_EDEFAULT.equals(datatype);
      case AsomemodelPackage.ATTRI__MULTIPLICITY:
        return multiplicity != null;
      case AsomemodelPackage.ATTRI__ORDER:
        return ORDER_EDEFAULT == null ? order != null : !ORDER_EDEFAULT.equals(order);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", datatype: ");
    result.append(datatype);
    result.append(", order: ");
    result.append(order);
    result.append(')');
    return result.toString();
  }

} //AttriImpl
