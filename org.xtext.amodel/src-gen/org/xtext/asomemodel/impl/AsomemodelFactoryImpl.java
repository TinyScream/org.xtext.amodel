/**
 * generated by Xtext 2.10.0
 */
package org.xtext.asomemodel.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.asomemodel.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AsomemodelFactoryImpl extends EFactoryImpl implements AsomemodelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AsomemodelFactory init()
  {
    try
    {
      AsomemodelFactory theAsomemodelFactory = (AsomemodelFactory)EPackage.Registry.INSTANCE.getEFactory(AsomemodelPackage.eNS_URI);
      if (theAsomemodelFactory != null)
      {
        return theAsomemodelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AsomemodelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AsomemodelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AsomemodelPackage.ASOMEMODEL: return createAsomemodel();
      case AsomemodelPackage.MODEL: return createModel();
      case AsomemodelPackage.REPOSITORY_SERVICE: return createRepositoryService();
      case AsomemodelPackage.DOMAIN_INTERFACE: return createDomainInterface();
      case AsomemodelPackage.DATA_PORT: return createDataPort();
      case AsomemodelPackage.ELEMENT: return createElement();
      case AsomemodelPackage.ENTITY: return createEntity();
      case AsomemodelPackage.MULTIPLICITY: return createMultiplicity();
      case AsomemodelPackage.VALUE_OBJECT: return createValueObject();
      case AsomemodelPackage.ATTRI: return createAttri();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Asomemodel createAsomemodel()
  {
    AsomemodelImpl asomemodel = new AsomemodelImpl();
    return asomemodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RepositoryService createRepositoryService()
  {
    RepositoryServiceImpl repositoryService = new RepositoryServiceImpl();
    return repositoryService;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainInterface createDomainInterface()
  {
    DomainInterfaceImpl domainInterface = new DomainInterfaceImpl();
    return domainInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataPort createDataPort()
  {
    DataPortImpl dataPort = new DataPortImpl();
    return dataPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Multiplicity createMultiplicity()
  {
    MultiplicityImpl multiplicity = new MultiplicityImpl();
    return multiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValueObject createValueObject()
  {
    ValueObjectImpl valueObject = new ValueObjectImpl();
    return valueObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attri createAttri()
  {
    AttriImpl attri = new AttriImpl();
    return attri;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AsomemodelPackage getAsomemodelPackage()
  {
    return (AsomemodelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AsomemodelPackage getPackage()
  {
    return AsomemodelPackage.eINSTANCE;
  }

} //AsomemodelFactoryImpl
