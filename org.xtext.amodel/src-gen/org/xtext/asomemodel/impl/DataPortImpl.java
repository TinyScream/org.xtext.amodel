/**
 * generated by Xtext 2.10.0
 */
package org.xtext.asomemodel.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.asomemodel.AsomemodelPackage;
import org.xtext.asomemodel.DataPort;
import org.xtext.asomemodel.DomainInterface;
import org.xtext.asomemodel.Model;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Port</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.asomemodel.impl.DataPortImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.DataPortImpl#getCrossModel <em>Cross Model</em>}</li>
 *   <li>{@link org.xtext.asomemodel.impl.DataPortImpl#getCrossInterface <em>Cross Interface</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataPortImpl extends MinimalEObjectImpl.Container implements DataPort
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCrossModel() <em>Cross Model</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCrossModel()
   * @generated
   * @ordered
   */
  protected Model crossModel;

  /**
   * The cached value of the '{@link #getCrossInterface() <em>Cross Interface</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCrossInterface()
   * @generated
   * @ordered
   */
  protected DomainInterface crossInterface;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataPortImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsomemodelPackage.Literals.DATA_PORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.DATA_PORT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model getCrossModel()
  {
    if (crossModel != null && crossModel.eIsProxy())
    {
      InternalEObject oldCrossModel = (InternalEObject)crossModel;
      crossModel = (Model)eResolveProxy(oldCrossModel);
      if (crossModel != oldCrossModel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AsomemodelPackage.DATA_PORT__CROSS_MODEL, oldCrossModel, crossModel));
      }
    }
    return crossModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model basicGetCrossModel()
  {
    return crossModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCrossModel(Model newCrossModel)
  {
    Model oldCrossModel = crossModel;
    crossModel = newCrossModel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.DATA_PORT__CROSS_MODEL, oldCrossModel, crossModel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainInterface getCrossInterface()
  {
    if (crossInterface != null && crossInterface.eIsProxy())
    {
      InternalEObject oldCrossInterface = (InternalEObject)crossInterface;
      crossInterface = (DomainInterface)eResolveProxy(oldCrossInterface);
      if (crossInterface != oldCrossInterface)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AsomemodelPackage.DATA_PORT__CROSS_INTERFACE, oldCrossInterface, crossInterface));
      }
    }
    return crossInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainInterface basicGetCrossInterface()
  {
    return crossInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCrossInterface(DomainInterface newCrossInterface)
  {
    DomainInterface oldCrossInterface = crossInterface;
    crossInterface = newCrossInterface;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsomemodelPackage.DATA_PORT__CROSS_INTERFACE, oldCrossInterface, crossInterface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsomemodelPackage.DATA_PORT__NAME:
        return getName();
      case AsomemodelPackage.DATA_PORT__CROSS_MODEL:
        if (resolve) return getCrossModel();
        return basicGetCrossModel();
      case AsomemodelPackage.DATA_PORT__CROSS_INTERFACE:
        if (resolve) return getCrossInterface();
        return basicGetCrossInterface();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsomemodelPackage.DATA_PORT__NAME:
        setName((String)newValue);
        return;
      case AsomemodelPackage.DATA_PORT__CROSS_MODEL:
        setCrossModel((Model)newValue);
        return;
      case AsomemodelPackage.DATA_PORT__CROSS_INTERFACE:
        setCrossInterface((DomainInterface)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsomemodelPackage.DATA_PORT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AsomemodelPackage.DATA_PORT__CROSS_MODEL:
        setCrossModel((Model)null);
        return;
      case AsomemodelPackage.DATA_PORT__CROSS_INTERFACE:
        setCrossInterface((DomainInterface)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsomemodelPackage.DATA_PORT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AsomemodelPackage.DATA_PORT__CROSS_MODEL:
        return crossModel != null;
      case AsomemodelPackage.DATA_PORT__CROSS_INTERFACE:
        return crossInterface != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DataPortImpl
