/*
 * generated by Xtext 2.10.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AsomemodelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AsomemodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Asomemodel");
		private final RuleCall cModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Asomemodel:
		//	Model;
		@Override public ParserRule getRule() { return rule; }
		
		//Model
		public RuleCall getModelParserRuleCall() { return cModelParserRuleCall; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRepositoryserviceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRepositoryserviceRepositoryServiceParserRuleCall_3_0 = (RuleCall)cRepositoryserviceAssignment_3.eContents().get(0);
		private final Assignment cDomaininterfaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDomaininterfaceDomainInterfaceParserRuleCall_4_0 = (RuleCall)cDomaininterfaceAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Model:
		//	'Model' name=ID '{'
		//	repositoryservice=RepositoryService?
		//	domaininterface=DomainInterface?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Model' name=ID '{' repositoryservice=RepositoryService? domaininterface=DomainInterface? '}'
		public Group getGroup() { return cGroup; }
		
		//'Model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//repositoryservice=RepositoryService?
		public Assignment getRepositoryserviceAssignment_3() { return cRepositoryserviceAssignment_3; }
		
		//RepositoryService
		public RuleCall getRepositoryserviceRepositoryServiceParserRuleCall_3_0() { return cRepositoryserviceRepositoryServiceParserRuleCall_3_0; }
		
		//domaininterface=DomainInterface?
		public Assignment getDomaininterfaceAssignment_4() { return cDomaininterfaceAssignment_4; }
		
		//DomainInterface
		public RuleCall getDomaininterfaceDomainInterfaceParserRuleCall_4_0() { return cDomaininterfaceDomainInterfaceParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RepositoryServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.RepositoryService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepositoryServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProvidedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataportAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataportDataPortParserRuleCall_4_0 = (RuleCall)cDataportAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RepositoryService:
		//	'RepositoryService' name=ID '{'
		//	'Provided' dataport=DataPort
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'RepositoryService' name=ID '{' 'Provided' dataport=DataPort '}'
		public Group getGroup() { return cGroup; }
		
		//'RepositoryService'
		public Keyword getRepositoryServiceKeyword_0() { return cRepositoryServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Provided'
		public Keyword getProvidedKeyword_3() { return cProvidedKeyword_3; }
		
		//dataport=DataPort
		public Assignment getDataportAssignment_4() { return cDataportAssignment_4; }
		
		//DataPort
		public RuleCall getDataportDataPortParserRuleCall_4_0() { return cDataportDataPortParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DomainInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.DomainInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DomainInterface:
		//	'DomainInterface' name=ID '{'
		//	element+=Element*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DomainInterface' name=ID '{' element+=Element* '}'
		public Group getGroup() { return cGroup; }
		
		//'DomainInterface'
		public Keyword getDomainInterfaceKeyword_0() { return cDomainInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//element+=Element*
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_3_0() { return cElementElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DataPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.DataPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInterfacesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCrossModelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cCrossModelModelCrossReference_5_0 = (CrossReference)cCrossModelAssignment_5.eContents().get(0);
		private final RuleCall cCrossModelModelIDTerminalRuleCall_5_0_1 = (RuleCall)cCrossModelModelCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCrossInterfaceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cCrossInterfaceDomainInterfaceCrossReference_7_0 = (CrossReference)cCrossInterfaceAssignment_7.eContents().get(0);
		private final RuleCall cCrossInterfaceDomainInterfaceIDTerminalRuleCall_7_0_1 = (RuleCall)cCrossInterfaceDomainInterfaceCrossReference_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DataPort:
		//	'DataPort' name=ID '{'
		//	// interfaces should meet the ID rule
		//	'interfaces' ':' crossModel=[Model] '.' crossInterface=[DomainInterface]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataPort' name=ID '{' // interfaces should meet the ID rule
		//'interfaces' ':' crossModel=[Model] '.' crossInterface=[DomainInterface] '}'
		public Group getGroup() { return cGroup; }
		
		//'DataPort'
		public Keyword getDataPortKeyword_0() { return cDataPortKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//// interfaces should meet the ID rule
		//'interfaces'
		public Keyword getInterfacesKeyword_3() { return cInterfacesKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//crossModel=[Model]
		public Assignment getCrossModelAssignment_5() { return cCrossModelAssignment_5; }
		
		//[Model]
		public CrossReference getCrossModelModelCrossReference_5_0() { return cCrossModelModelCrossReference_5_0; }
		
		//ID
		public RuleCall getCrossModelModelIDTerminalRuleCall_5_0_1() { return cCrossModelModelIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//crossInterface=[DomainInterface]
		public Assignment getCrossInterfaceAssignment_7() { return cCrossInterfaceAssignment_7; }
		
		//[DomainInterface]
		public CrossReference getCrossInterfaceDomainInterfaceCrossReference_7_0() { return cCrossInterfaceDomainInterfaceCrossReference_7_0; }
		
		//ID
		public RuleCall getCrossInterfaceDomainInterfaceIDTerminalRuleCall_7_0_1() { return cCrossInterfaceDomainInterfaceIDTerminalRuleCall_7_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValueObjectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//	Type | Entity | ValueObject;
		@Override public ParserRule getRule() { return rule; }
		
		//Type | Entity | ValueObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
		
		//ValueObject
		public RuleCall getValueObjectParserRuleCall_2() { return cValueObjectParserRuleCall_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDatatypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Type:
		//	'Type' Datatype ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Type' Datatype ';'
		public Group getGroup() { return cGroup; }
		
		//'Type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//Datatype
		public RuleCall getDatatypeParserRuleCall_1() { return cDatatypeParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDoubleKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStringKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Datatype:
		//	'Double' | 'Int' | 'String';
		@Override public ParserRule getRule() { return rule; }
		
		//'Double' | 'Int' | 'String'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Double'
		public Keyword getDoubleKeyword_0() { return cDoubleKeyword_0; }
		
		//'Int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//'String'
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImmutableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNonVolatileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEntityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cAttributesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAttriAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAttriAttriParserRuleCall_8_0 = (RuleCall)cAttriAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Entity:
		//	'Immutable' 'NonVolatile' 'Entity' name=ID multiplicity=Multiplicity '{'
		//	'attributes' ':'
		//	attri+=Attri*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Immutable' 'NonVolatile' 'Entity' name=ID multiplicity=Multiplicity '{' 'attributes' ':' attri+=Attri* '}'
		public Group getGroup() { return cGroup; }
		
		//'Immutable'
		public Keyword getImmutableKeyword_0() { return cImmutableKeyword_0; }
		
		//'NonVolatile'
		public Keyword getNonVolatileKeyword_1() { return cNonVolatileKeyword_1; }
		
		//'Entity'
		public Keyword getEntityKeyword_2() { return cEntityKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_4_0() { return cMultiplicityMultiplicityParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'attributes'
		public Keyword getAttributesKeyword_6() { return cAttributesKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//attri+=Attri*
		public Assignment getAttriAssignment_8() { return cAttriAssignment_8; }
		
		//Attri
		public RuleCall getAttriAttriParserRuleCall_8_0() { return cAttriAttriParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNameINTTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Keyword cInfKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Multiplicity: //e.g. [0, inf] => zero to infinite; [2,5] => two to five
		//	'[' name=INT ',' (name=INT | 'inf') ']';
		@Override public ParserRule getRule() { return rule; }
		
		////e.g. [0, inf] => zero to infinite; [2,5] => two to five
		//'[' name=INT ',' (name=INT | 'inf') ']'
		public Group getGroup() { return cGroup; }
		
		////e.g. [0, inf] => zero to infinite; [2,5] => two to five
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//name=INT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_1_0() { return cNameINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//(name=INT | 'inf')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//name=INT
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_3_0_0() { return cNameINTTerminalRuleCall_3_0_0; }
		
		//'inf'
		public Keyword getInfKeyword_3_1() { return cInfKeyword_3_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ValueObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.ValueObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAttributesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttriAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttriAttriParserRuleCall_5_0 = (RuleCall)cAttriAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ValueObject:
		//	'ValueObject' name=ID '{'
		//	'attributes' ':'
		//	attri+=Attri*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ValueObject' name=ID '{' 'attributes' ':' attri+=Attri* '}'
		public Group getGroup() { return cGroup; }
		
		//'ValueObject'
		public Keyword getValueObjectKeyword_0() { return cValueObjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'attributes'
		public Keyword getAttributesKeyword_3() { return cAttributesKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//attri+=Attri*
		public Assignment getAttriAssignment_5() { return cAttriAssignment_5; }
		
		//Attri
		public RuleCall getAttriAttriParserRuleCall_5_0() { return cAttriAttriParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AttriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Attri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCrossModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCrossModelModelCrossReference_2_0 = (CrossReference)cCrossModelAssignment_2.eContents().get(0);
		private final RuleCall cCrossModelModelIDTerminalRuleCall_2_0_1 = (RuleCall)cCrossModelModelCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCrossInterfaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cCrossInterfaceDomainInterfaceCrossReference_4_0 = (CrossReference)cCrossInterfaceAssignment_4.eContents().get(0);
		private final RuleCall cCrossInterfaceDomainInterfaceIDTerminalRuleCall_4_0_1 = (RuleCall)cCrossInterfaceDomainInterfaceCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDatatypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDatatypeDatatypeParserRuleCall_6_0 = (RuleCall)cDatatypeAssignment_6.eContents().get(0);
		private final Assignment cMultiplicityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_7_0 = (RuleCall)cMultiplicityAssignment_7.eContents().get(0);
		private final Assignment cOrderAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOrderOrderParserRuleCall_8_0 = (RuleCall)cOrderAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Attri:
		//	name=ID ':'
		//	crossModel=[Model] '.'
		//	crossInterface=[DomainInterface] '.'
		//	datatype=Datatype
		//	multiplicity=Multiplicity
		//	order=Order
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' crossModel=[Model] '.' crossInterface=[DomainInterface] '.' datatype=Datatype multiplicity=Multiplicity
		//order=Order ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//crossModel=[Model]
		public Assignment getCrossModelAssignment_2() { return cCrossModelAssignment_2; }
		
		//[Model]
		public CrossReference getCrossModelModelCrossReference_2_0() { return cCrossModelModelCrossReference_2_0; }
		
		//ID
		public RuleCall getCrossModelModelIDTerminalRuleCall_2_0_1() { return cCrossModelModelIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//crossInterface=[DomainInterface]
		public Assignment getCrossInterfaceAssignment_4() { return cCrossInterfaceAssignment_4; }
		
		//[DomainInterface]
		public CrossReference getCrossInterfaceDomainInterfaceCrossReference_4_0() { return cCrossInterfaceDomainInterfaceCrossReference_4_0; }
		
		//ID
		public RuleCall getCrossInterfaceDomainInterfaceIDTerminalRuleCall_4_0_1() { return cCrossInterfaceDomainInterfaceIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//datatype=Datatype
		public Assignment getDatatypeAssignment_6() { return cDatatypeAssignment_6; }
		
		//Datatype
		public RuleCall getDatatypeDatatypeParserRuleCall_6_0() { return cDatatypeDatatypeParserRuleCall_6_0; }
		
		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_7() { return cMultiplicityAssignment_7; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_7_0() { return cMultiplicityMultiplicityParserRuleCall_7_0; }
		
		//order=Order
		public Assignment getOrderAssignment_8() { return cOrderAssignment_8; }
		
		//Order
		public RuleCall getOrderOrderParserRuleCall_8_0() { return cOrderOrderParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Asomemodel.Order");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrderedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnorderedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Order:
		//	'ordered' | 'unordered';
		@Override public ParserRule getRule() { return rule; }
		
		//'ordered' | 'unordered'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ordered'
		public Keyword getOrderedKeyword_0() { return cOrderedKeyword_0; }
		
		//'unordered'
		public Keyword getUnorderedKeyword_1() { return cUnorderedKeyword_1; }
	}
	
	
	private final AsomemodelElements pAsomemodel;
	private final ModelElements pModel;
	private final RepositoryServiceElements pRepositoryService;
	private final DomainInterfaceElements pDomainInterface;
	private final DataPortElements pDataPort;
	private final ElementElements pElement;
	private final TypeElements pType;
	private final DatatypeElements pDatatype;
	private final EntityElements pEntity;
	private final MultiplicityElements pMultiplicity;
	private final ValueObjectElements pValueObject;
	private final AttriElements pAttri;
	private final OrderElements pOrder;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AsomemodelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAsomemodel = new AsomemodelElements();
		this.pModel = new ModelElements();
		this.pRepositoryService = new RepositoryServiceElements();
		this.pDomainInterface = new DomainInterfaceElements();
		this.pDataPort = new DataPortElements();
		this.pElement = new ElementElements();
		this.pType = new TypeElements();
		this.pDatatype = new DatatypeElements();
		this.pEntity = new EntityElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pValueObject = new ValueObjectElements();
		this.pAttri = new AttriElements();
		this.pOrder = new OrderElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Asomemodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Asomemodel:
	//	Model;
	public AsomemodelElements getAsomemodelAccess() {
		return pAsomemodel;
	}
	
	public ParserRule getAsomemodelRule() {
		return getAsomemodelAccess().getRule();
	}
	
	//Model:
	//	'Model' name=ID '{'
	//	repositoryservice=RepositoryService?
	//	domaininterface=DomainInterface?
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//RepositoryService:
	//	'RepositoryService' name=ID '{'
	//	'Provided' dataport=DataPort
	//	'}';
	public RepositoryServiceElements getRepositoryServiceAccess() {
		return pRepositoryService;
	}
	
	public ParserRule getRepositoryServiceRule() {
		return getRepositoryServiceAccess().getRule();
	}
	
	//DomainInterface:
	//	'DomainInterface' name=ID '{'
	//	element+=Element*
	//	'}';
	public DomainInterfaceElements getDomainInterfaceAccess() {
		return pDomainInterface;
	}
	
	public ParserRule getDomainInterfaceRule() {
		return getDomainInterfaceAccess().getRule();
	}
	
	//DataPort:
	//	'DataPort' name=ID '{'
	//	// interfaces should meet the ID rule
	//	'interfaces' ':' crossModel=[Model] '.' crossInterface=[DomainInterface]
	//	'}';
	public DataPortElements getDataPortAccess() {
		return pDataPort;
	}
	
	public ParserRule getDataPortRule() {
		return getDataPortAccess().getRule();
	}
	
	//Element:
	//	Type | Entity | ValueObject;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Type:
	//	'Type' Datatype ';';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Datatype:
	//	'Double' | 'Int' | 'String';
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//Entity:
	//	'Immutable' 'NonVolatile' 'Entity' name=ID multiplicity=Multiplicity '{'
	//	'attributes' ':'
	//	attri+=Attri*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Multiplicity: //e.g. [0, inf] => zero to infinite; [2,5] => two to five
	//	'[' name=INT ',' (name=INT | 'inf') ']';
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//ValueObject:
	//	'ValueObject' name=ID '{'
	//	'attributes' ':'
	//	attri+=Attri*
	//	'}';
	public ValueObjectElements getValueObjectAccess() {
		return pValueObject;
	}
	
	public ParserRule getValueObjectRule() {
		return getValueObjectAccess().getRule();
	}
	
	//Attri:
	//	name=ID ':'
	//	crossModel=[Model] '.'
	//	crossInterface=[DomainInterface] '.'
	//	datatype=Datatype
	//	multiplicity=Multiplicity
	//	order=Order
	//	';';
	public AttriElements getAttriAccess() {
		return pAttri;
	}
	
	public ParserRule getAttriRule() {
		return getAttriAccess().getRule();
	}
	
	//Order:
	//	'ordered' | 'unordered';
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
