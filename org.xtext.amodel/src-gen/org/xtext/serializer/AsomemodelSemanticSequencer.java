/*
 * generated by Xtext 2.10.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.asomemodel.AsomemodelPackage;
import org.xtext.asomemodel.Attri;
import org.xtext.asomemodel.DataPort;
import org.xtext.asomemodel.DomainInterface;
import org.xtext.asomemodel.Entity;
import org.xtext.asomemodel.Model;
import org.xtext.asomemodel.Multiplicity;
import org.xtext.asomemodel.RepositoryService;
import org.xtext.asomemodel.ValueObject;
import org.xtext.services.AsomemodelGrammarAccess;

@SuppressWarnings("all")
public class AsomemodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AsomemodelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AsomemodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AsomemodelPackage.ATTRI:
				sequence_Attri(context, (Attri) semanticObject); 
				return; 
			case AsomemodelPackage.DATA_PORT:
				sequence_DataPort(context, (DataPort) semanticObject); 
				return; 
			case AsomemodelPackage.DOMAIN_INTERFACE:
				sequence_DomainInterface(context, (DomainInterface) semanticObject); 
				return; 
			case AsomemodelPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case AsomemodelPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AsomemodelPackage.MULTIPLICITY:
				sequence_Multiplicity(context, (Multiplicity) semanticObject); 
				return; 
			case AsomemodelPackage.REPOSITORY_SERVICE:
				sequence_RepositoryService(context, (RepositoryService) semanticObject); 
				return; 
			case AsomemodelPackage.VALUE_OBJECT:
				sequence_ValueObject(context, (ValueObject) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attri returns Attri
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         crossModel=[Model|ID] 
	 *         crossInterface=[DomainInterface|ID] 
	 *         datatype=Datatype 
	 *         multiplicity=Multiplicity 
	 *         order=Order
	 *     )
	 */
	protected void sequence_Attri(ISerializationContext context, Attri semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.ATTRI__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.ATTRI__NAME));
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.ATTRI__CROSS_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.ATTRI__CROSS_MODEL));
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.ATTRI__CROSS_INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.ATTRI__CROSS_INTERFACE));
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.ATTRI__DATATYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.ATTRI__DATATYPE));
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.ATTRI__MULTIPLICITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.ATTRI__MULTIPLICITY));
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.ATTRI__ORDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.ATTRI__ORDER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttriAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttriAccess().getCrossModelModelIDTerminalRuleCall_2_0_1(), semanticObject.getCrossModel());
		feeder.accept(grammarAccess.getAttriAccess().getCrossInterfaceDomainInterfaceIDTerminalRuleCall_4_0_1(), semanticObject.getCrossInterface());
		feeder.accept(grammarAccess.getAttriAccess().getDatatypeDatatypeParserRuleCall_6_0(), semanticObject.getDatatype());
		feeder.accept(grammarAccess.getAttriAccess().getMultiplicityMultiplicityParserRuleCall_7_0(), semanticObject.getMultiplicity());
		feeder.accept(grammarAccess.getAttriAccess().getOrderOrderParserRuleCall_8_0(), semanticObject.getOrder());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataPort returns DataPort
	 *
	 * Constraint:
	 *     (name=ID crossModel=[Model|ID] crossInterface=[DomainInterface|ID])
	 */
	protected void sequence_DataPort(ISerializationContext context, DataPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.DATA_PORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.DATA_PORT__NAME));
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.DATA_PORT__CROSS_MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.DATA_PORT__CROSS_MODEL));
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.DATA_PORT__CROSS_INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.DATA_PORT__CROSS_INTERFACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataPortAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDataPortAccess().getCrossModelModelIDTerminalRuleCall_5_0_1(), semanticObject.getCrossModel());
		feeder.accept(grammarAccess.getDataPortAccess().getCrossInterfaceDomainInterfaceIDTerminalRuleCall_7_0_1(), semanticObject.getCrossInterface());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DomainInterface returns DomainInterface
	 *
	 * Constraint:
	 *     (name=ID element+=Element*)
	 */
	protected void sequence_DomainInterface(ISerializationContext context, DomainInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID multiplicity=Multiplicity attri+=Attri*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Asomemodel returns Model
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID repositoryservice=RepositoryService? domaininterface=DomainInterface?)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Multiplicity returns Multiplicity
	 *
	 * Constraint:
	 *     (name=INT name=INT?)
	 */
	protected void sequence_Multiplicity(ISerializationContext context, Multiplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RepositoryService returns RepositoryService
	 *
	 * Constraint:
	 *     (name=ID dataport=DataPort)
	 */
	protected void sequence_RepositoryService(ISerializationContext context, RepositoryService semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.REPOSITORY_SERVICE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.REPOSITORY_SERVICE__NAME));
			if (transientValues.isValueTransient(semanticObject, AsomemodelPackage.Literals.REPOSITORY_SERVICE__DATAPORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsomemodelPackage.Literals.REPOSITORY_SERVICE__DATAPORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRepositoryServiceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRepositoryServiceAccess().getDataportDataPortParserRuleCall_4_0(), semanticObject.getDataport());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns ValueObject
	 *     ValueObject returns ValueObject
	 *
	 * Constraint:
	 *     (name=ID attri+=Attri*)
	 */
	protected void sequence_ValueObject(ISerializationContext context, ValueObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
