/*
 * generated by Xtext 2.10.0
 */
grammar InternalAsomemodel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.AsomemodelGrammarAccess;

}

@parser::members {

 	private AsomemodelGrammarAccess grammarAccess;

    public InternalAsomemodelParser(TokenStream input, AsomemodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Asomemodel";
   	}

   	@Override
   	protected AsomemodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAsomemodel
entryRuleAsomemodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsomemodelRule()); }
	iv_ruleAsomemodel=ruleAsomemodel
	{ $current=$iv_ruleAsomemodel.current; }
	EOF;

// Rule Asomemodel
ruleAsomemodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAsomemodelAccess().getModelParserRuleCall());
	}
	this_Model_0=ruleModel
	{
		$current = $this_Model_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getRepositoryserviceRepositoryServiceParserRuleCall_3_0());
				}
				lv_repositoryservice_3_0=ruleRepositoryService
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"repositoryservice",
						lv_repositoryservice_3_0,
						"org.xtext.Asomemodel.RepositoryService");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getDomaininterfaceDomainInterfaceParserRuleCall_4_0());
				}
				lv_domaininterface_4_0=ruleDomainInterface
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"domaininterface",
						lv_domaininterface_4_0,
						"org.xtext.Asomemodel.DomainInterface");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleRepositoryService
entryRuleRepositoryService returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepositoryServiceRule()); }
	iv_ruleRepositoryService=ruleRepositoryService
	{ $current=$iv_ruleRepositoryService.current; }
	EOF;

// Rule RepositoryService
ruleRepositoryService returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RepositoryService'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepositoryServiceAccess().getRepositoryServiceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRepositoryServiceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRepositoryServiceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepositoryServiceAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='Provided'
		{
			newLeafNode(otherlv_3, grammarAccess.getRepositoryServiceAccess().getProvidedKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepositoryServiceAccess().getDataportDataPortParserRuleCall_4_0());
				}
				lv_dataport_4_0=ruleDataPort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepositoryServiceRule());
					}
					set(
						$current,
						"dataport",
						lv_dataport_4_0,
						"org.xtext.Asomemodel.DataPort");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getRepositoryServiceAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDomainInterface
entryRuleDomainInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainInterfaceRule()); }
	iv_ruleDomainInterface=ruleDomainInterface
	{ $current=$iv_ruleDomainInterface.current; }
	EOF;

// Rule DomainInterface
ruleDomainInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DomainInterface'
		{
			newLeafNode(otherlv_0, grammarAccess.getDomainInterfaceAccess().getDomainInterfaceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDomainInterfaceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDomainInterfaceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDomainInterfaceAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainInterfaceAccess().getElementElementParserRuleCall_3_0());
				}
				lv_element_3_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainInterfaceRule());
					}
					add(
						$current,
						"element",
						lv_element_3_0,
						"org.xtext.Asomemodel.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getDomainInterfaceAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDataPort
entryRuleDataPort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataPortRule()); }
	iv_ruleDataPort=ruleDataPort
	{ $current=$iv_ruleDataPort.current; }
	EOF;

// Rule DataPort
ruleDataPort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DataPort'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataPortAccess().getDataPortKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataPortAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataPortRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDataPortAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='interfaces'
		{
			newLeafNode(otherlv_3, grammarAccess.getDataPortAccess().getInterfacesKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getDataPortAccess().getColonKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataPortRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getDataPortAccess().getCrossModelModelCrossReference_5_0());
				}
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getDataPortAccess().getFullStopKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataPortRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getDataPortAccess().getCrossInterfaceDomainInterfaceCrossReference_7_0());
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getDataPortAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getTypeParserRuleCall_0());
		}
		ruleType
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getEntityParserRuleCall_1());
		}
		this_Entity_1=ruleEntity
		{
			$current = $this_Entity_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getValueObjectParserRuleCall_2());
		}
		this_ValueObject_2=ruleValueObject
		{
			$current = $this_ValueObject_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getDatatypeParserRuleCall_1());
		}
		this_Datatype_1=ruleDatatype
		{
			$current.merge(this_Datatype_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleDatatype
entryRuleDatatype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeRule()); }
	iv_ruleDatatype=ruleDatatype
	{ $current=$iv_ruleDatatype.current.getText(); }
	EOF;

// Rule Datatype
ruleDatatype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDatatypeAccess().getDoubleKeyword_0());
		}
		    |
		kw='Int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDatatypeAccess().getIntKeyword_1());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDatatypeAccess().getStringKeyword_2());
		}
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Immutable'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getImmutableKeyword_0());
		}
		otherlv_1='NonVolatile'
		{
			newLeafNode(otherlv_1, grammarAccess.getEntityAccess().getNonVolatileKeyword_1());
		}
		otherlv_2='Entity'
		{
			newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getEntityKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getMultiplicityMultiplicityParserRuleCall_4_0());
				}
				lv_multiplicity_4_0=ruleMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_4_0,
						"org.xtext.Asomemodel.Multiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_5());
		}
		otherlv_6='attributes'
		{
			newLeafNode(otherlv_6, grammarAccess.getEntityAccess().getAttributesKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getEntityAccess().getColonKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getAttriAttriParserRuleCall_8_0());
				}
				lv_attri_8_0=ruleAttri
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					add(
						$current,
						"attri",
						lv_attri_8_0,
						"org.xtext.Asomemodel.Attri");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); }
	iv_ruleMultiplicity=ruleMultiplicity
	{ $current=$iv_ruleMultiplicity.current; }
	EOF;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getMultiplicityAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_INT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMultiplicityAccess().getNameINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getMultiplicityAccess().getCommaKeyword_2());
		}
		(
			(
				(
					lv_name_3_0=RULE_INT
					{
						newLeafNode(lv_name_3_0, grammarAccess.getMultiplicityAccess().getNameINTTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultiplicityRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			    |
			otherlv_4='inf'
			{
				newLeafNode(otherlv_4, grammarAccess.getMultiplicityAccess().getInfKeyword_3_1());
			}
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getMultiplicityAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleValueObject
entryRuleValueObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueObjectRule()); }
	iv_ruleValueObject=ruleValueObject
	{ $current=$iv_ruleValueObject.current; }
	EOF;

// Rule ValueObject
ruleValueObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ValueObject'
		{
			newLeafNode(otherlv_0, grammarAccess.getValueObjectAccess().getValueObjectKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getValueObjectAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueObjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getValueObjectAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='attributes'
		{
			newLeafNode(otherlv_3, grammarAccess.getValueObjectAccess().getAttributesKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getValueObjectAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueObjectAccess().getAttriAttriParserRuleCall_5_0());
				}
				lv_attri_5_0=ruleAttri
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueObjectRule());
					}
					add(
						$current,
						"attri",
						lv_attri_5_0,
						"org.xtext.Asomemodel.Attri");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getValueObjectAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAttri
entryRuleAttri returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttriRule()); }
	iv_ruleAttri=ruleAttri
	{ $current=$iv_ruleAttri.current; }
	EOF;

// Rule Attri
ruleAttri returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttriAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttriRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttriAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttriRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAttriAccess().getCrossModelModelCrossReference_2_0());
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getAttriAccess().getFullStopKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttriRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getAttriAccess().getCrossInterfaceDomainInterfaceCrossReference_4_0());
				}
			)
		)
		otherlv_5='.'
		{
			newLeafNode(otherlv_5, grammarAccess.getAttriAccess().getFullStopKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttriAccess().getDatatypeDatatypeParserRuleCall_6_0());
				}
				lv_datatype_6_0=ruleDatatype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttriRule());
					}
					set(
						$current,
						"datatype",
						lv_datatype_6_0,
						"org.xtext.Asomemodel.Datatype");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAttriAccess().getMultiplicityMultiplicityParserRuleCall_7_0());
				}
				lv_multiplicity_7_0=ruleMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttriRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_7_0,
						"org.xtext.Asomemodel.Multiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAttriAccess().getOrderOrderParserRuleCall_8_0());
				}
				lv_order_8_0=ruleOrder
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttriRule());
					}
					set(
						$current,
						"order",
						lv_order_8_0,
						"org.xtext.Asomemodel.Order");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getAttriAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRuleOrder
entryRuleOrder returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOrderRule()); }
	iv_ruleOrder=ruleOrder
	{ $current=$iv_ruleOrder.current.getText(); }
	EOF;

// Rule Order
ruleOrder returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='ordered'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrderAccess().getOrderedKeyword_0());
		}
		    |
		kw='unordered'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrderAccess().getUnorderedKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
